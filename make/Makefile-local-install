# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~ LOCAL DIST INSTALL SCRIPTS ~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~~~~~~ INSTALL DEPENDENCY SCRIPT ~~~~~~~~~~~~~~

# Install system requirements for MDAI
# .SILENT: mdai-system-reqs
.PHONY: mdai-system-reqs
mdai-system-reqs:
	@echo "ðŸŸ¢ Start mdai-system-reqs..."
	@kubectl version || brew list kubectl || brew install kubectl \
		docker -v || brew list --cask docker || brew install --cask docker \
		helm version || brew list helm || brew install helm \
		kind version || brew list kind || brew install kind
	@echo "âœ… Complete mdai-system-reqs!"

# Add helm chart repos available on system / machine
# .SILENT: mdai-add-helm-charts
.PHONY: mdai-add-helm-charts
mdai-add-helm-charts:
	@echo "ðŸŸ¢ Start mdai-add-helm-charts..."
	@helm repo list | grep prometheus-community || helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
	@helm repo list | grep cert-manager || helm repo add jetstack https://charts.jetstack.io
	@helm repo list | grep mydecisive || helm repo add mydecisive https://decisiveai.github.io/mdai-helm-charts
	@echo "âœ… Complete mdai-add-helm-charts!"

# Install helm charts to cluster
.SILENT: mdai-install-helm-charts
.PHONY: mdai-install-helm-charts
mdai-install-helm-charts:
	@echo "ðŸŸ¢ Start mdai-install-helm-charts..."
	helm repo update
	helm upgrade cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.14.5 --set installCRDs=true --install --wait
	helm upgrade opentelemetry-operator mydecisive/opentelemetry-operator --namespace opentelemetry-operator-system --create-namespace --install --set manager.image.repository=public.ecr.aws/p3k6k6h3/opentelemetry-operator --set manager.image.tag=latest --set leaderElection.enabled=false --version 0.43.1 --wait
	helm upgrade prometheus prometheus-community/prometheus --install -f ./templates/prometheus-values.yaml
	helm upgrade mdai-api mydecisive/mdai-api --version 0.0.3 --install
	helm upgrade mdai-console mydecisive/mdai-console --version 0.2.2 --install
	helm upgrade datalyzer mydecisive/datalyzer --version 0.0.4 --install
	@echo "âœ… Complete mdai-install-helm-charts!"

# ~~~~~~~~~~~~~~~~~ CREATE ACTION RULES ~~~~~~~~~~~~~~~~~

# Creates a cluster for an MDAI engine to be created
.SILENT: create-mdai-cluster
.PHONY: create-mdai-cluster
create-mdai-cluster:
	@kind get clusters | grep -q mdai-local || kind create cluster --name mdai-local
	kubectl cluster-info --context kind-mdai-local

# Creates a cluster for an MDAI engine to be created
.SILENT: mdai-install-cluster-dependencies
.PHONY: mdai-install-cluster-dependencies
mdai-install-cluster-dependencies: \
	mdai-system-reqs mdai-add-helm-charts mdai-install-helm-charts

# wait for required pods to be installed
.SILENT: mdai-wait-for-pods
.PHONY: mdai-wait-for-pods
mdai-wait-for-pods:
	@echo "ðŸŸ¢ Start mdai-wait-for-pods..."
	kubectl -n opentelemetry-operator-system wait --timeout=30s --for condition=ready pod -l app.kubernetes.io/name=opentelemetry-operator
	kubectl -n opentelemetry-operator-system wait --timeout=30s --for condition=ready pod -l app.kubernetes.io/component=controller-manager
	kubectl -n opentelemetry-operator-system wait --timeout=30s --for condition=established crd opentelemetrycollectors.opentelemetry.io
	kubectl -n cert-manager wait --timeout=30s --for condition=ready pod -l app.kubernetes.io/name=cert-manager
	kubectl -n cert-manager wait --timeout=30s --for condition=ready pod -l app.kubernetes.io/name=webhook
	@echo "âœ… Complete mdai-wait-for-pods!"

# deploy mdai operator
.SILENT: mdai-deploy-operator
.PHONY: mdai-deploy-operator
mdai-deploy-operator:
	helm upgrade mydecisive-engine-operator mydecisive/mydecisive-engine-operator --namespace mydecisive-engine-operator-system --create-namespace --install --wait
	kubectl wait --timeout=30s --for condition=established crd mydecisiveengines.mydecisive.ai
	kubectl apply -f templates/mdai-operator.yaml

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~ LOCAL INSTALL RECIPE ~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.SILENT: install-all
.PHONY: install-all
install-all: create-mdai-cluster mdai-install-cluster-dependencies mdai-wait-for-pods mdai-deploy-operator

.SILENT: install-mdai
.PHONY: install-mdai
install-mdai: mdai-install-cluster-dependencies mdai-wait-for-pods mdai-deploy-operator

SILENT: install-all-semi-auto
.PHONY: install-all-semi-auto
install-all-semi-auto: create-mdai-cluster mdai-add-helm-charts mdai-install-helm-charts mdai-wait-for-pods mdai-deploy-operator
